{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNlht2MzsF3Wc7sYLvXnQVI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jecronin/us-housing-data/blob/main/housing_market_v2.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9qFBxC_pVzL_"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import numpy as np\n",
        "st.set_page_config(layout=\"wide\")\n",
        "# -- Read in the data\n",
        "url = \"https://econdata.s3-us-west-2.amazonaws.com/Reports/Core/RDC_Inventory_Core_Metrics_Zip_History.csv\"\n",
        "cols = ['month_date_yyyymm', 'postal_code','median_listing_price',  'active_listing_count','median_days_on_market', 'new_listing_count', 'price_increased_count', 'price_reduced_count'] #add back zip name when want to use\n",
        "#data_dic = {'month_date_yyyymm':'string', 'postal_code':'string', 'zip_name':'string','median_listing_price':'int64',  'active_listing_count':'int32','median_days_on_market':'int32'}\n",
        "df = pd.read_csv(url, low_memory=False, usecols=cols, sep=',') #read in csv\n",
        "df.drop(df.tail(1).index,inplace=True) # drop last row that has data RDC contact info                                 \n",
        "tgt_zips = sorted(['74728', '94123', '11211', '11249', '30560', '39110', '95670', '35004', '35007', '35094'])#set target list of zips\n",
        "df = df[df.postal_code.isin(tgt_zips)] #filter df\n",
        "df['month_date_yyyymm'] = pd.to_datetime(df['month_date_yyyymm'], format='%Y%m') #convert date to datetime\n",
        "#reduce memory of dataframe\n",
        "def reduce_mem_usage(df):\n",
        "    for col in df.columns:\n",
        "        col_type = df[col].dtype\n",
        "    if col_type != object:\n",
        "            c_min = df[col].min()\n",
        "            c_max = df[col].max()\n",
        "            if str(col_type)[:3] == 'int':\n",
        "                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n",
        "                    df[col] = df[col].astype(np.int8)\n",
        "                elif c_min > np.iinfo(np.uint8).min and c_max < np.iinfo(np.uint8).max:\n",
        "                    df[col] = df[col].astype(np.uint8)\n",
        "                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n",
        "                    df[col] = df[col].astype(np.int16)\n",
        "                elif c_min > np.iinfo(np.uint16).min and c_max < np.iinfo(np.uint16).max:\n",
        "                    df[col] = df[col].astype(np.uint16)\n",
        "                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n",
        "                    df[col] = df[col].astype(np.int32)\n",
        "                elif c_min > np.iinfo(np.uint32).min and c_max < np.iinfo(np.uint32).max:\n",
        "                    df[col] = df[col].astype(np.uint32)                    \n",
        "                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n",
        "                    df[col] = df[col].astype(np.int64)\n",
        "                elif c_min > np.iinfo(np.uint64).min and c_max < np.iinfo(np.uint64).max:\n",
        "                    df[col] = df[col].astype(np.uint64)\n",
        "            elif str(col_type)[:5] == 'float':\n",
        "                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n",
        "                    df[col] = df[col].astype(np.float16)\n",
        "                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n",
        "                    df[col] = df[col].astype(np.float32)\n",
        "                else:\n",
        "                    df[col] = df[col].astype(np.float64)\n",
        "reduce_mem_usage(df)\n",
        "\n",
        "#Create 3 columns\n",
        "col1, col2, col3 = st.columns([5, 5, 20])\n",
        "# -- Put the image in the middle column\n",
        "# - Commented out here so that the file will run without having the image downloaded\n",
        "with col1:\n",
        "    st.markdown('Source: Realtor.com Research Data')\n",
        "with col2:\n",
        "  zip_input = st.selectbox(\"What zip code?\", tgt_zips)\n",
        "# -- Put the title in the last column\n",
        "with col3:\n",
        "    st.title(\"Housing Market Trends by Zip Code\")\n",
        "# -- We use the first column here as a dummy to add a space to the left\n",
        "\n",
        "df_tgt = df[df['postal_code'] == zip_input].sort_values('month_date_yyyymm', ascending=True)\n",
        "fig = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='median_listing_price',\n",
        "                title = 'Median Listing Price' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig, use_container_width=True)\n",
        "\n",
        "fig2 = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='active_listing_count',\n",
        "                title = 'Monthly Active Listing Count' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig2, use_container_width=True)\n",
        "\n",
        "fig3 = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='median_days_on_market',\n",
        "                title = 'Median Days On Market' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig3, use_container_width=True)\n",
        "\n",
        "fig4 = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='new_listing_count',\n",
        "                title = 'Monthly New Listing Count' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig4, use_container_width=True)\n",
        "\n",
        "fig5 = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='price_increased_count',\n",
        "                title = 'Monthly Price Increase Count' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig5, use_container_width=True)\n",
        "\n",
        "fig6 = px.line(df_tgt,\n",
        "                x='month_date_yyyymm',\n",
        "                y='price_reduced_count',\n",
        "                title = 'Monthly Price Reduced Count' + \" in \" + zip_input,\n",
        "                markers=True\n",
        ")\n",
        "# -- Input the Plotly chart to the Streamlit interface\n",
        "st.plotly_chart(fig6, use_container_width=True)"
      ]
    }
  ]
}